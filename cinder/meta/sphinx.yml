doc:
  name: Cinder
  description: Cinder provides an infrastructure for managing volumes in OpenStack. It was originally a Nova component called nova-volume, but has become an independent project since the Folsom release.
  role:
  {%- if pillar.cinder.controller is defined %}
  {%- from "cinder/map.jinja" import controller with context %}
    controller:
      name: controller
      endpoint:
        glance_api:
          name: cinder-api
          type: cinder-api
          address: http://{{ controller.osapi.host }}:8776
          protocol: http
      param:
        bind:
          value: {{ controller.osapi.host }}:8776
        version:
          name: "Version"
          value: {{ controller.version }}
        glance_host:
          name: "Glance service"
          value: {{ controller.glance.host }}:{{ controller.glance.port }}
        database_host:
          name: "Database"
          value: {{ controller.database.user }}@{{ controller.database.host }}:{{ controller.database.port }}//{{ controller.database.name }}
        {%- set rabbit_port = controller.message_queue.get('port', 5671 if controller.message_queue.get('ssl',{}).get('enabled', False)  else 5672) %}
        message_queue_ip:
          name: "Message queue"
          {%- if controller.message_queue.members is defined %}
          value: {% for member in controller.message_queue.members -%}
                 {{ controller.message_queue.user }}:{{ controller.message_queue.password }}@{{ member.host }}:{{ member.get('port',rabbit_port) }}
                 {%- if not loop.last -%},{%- endif -%}
                 {%- endfor -%}
                 /{{ controller.message_queue.virtual_host }}
          {%- else %}
          value:  {{ controller.message_queue.user }}:{{ controller.message_queue.password }}@{{ controller.message_queue.host }}:{{ rabbit_port }}/{{ controller.message_queue.virtual_host }}
          {%- endif %}
        identity_host:
          name: "Identity service"
          value: {{ controller.identity.user }}@{{ controller.identity.host }}:{{ controller.identity.port }}
        packages:
          value: |
            {%- for pkg in controller.pkgs %}
            {%- set pkg_version = "dpkg -l "+pkg+" | grep "+pkg+" | awk '{print $3}'" %}
            * {{ pkg }}: {{ salt['cmd.shell'](pkg_version) }}
            {%- endfor %}
        {%- if controller.backend is defined %}
        backends:
          value: |
            {%- for backend_name, backend in controller.get('backend', {}).items() %}
            * {{ backend_name }}:
              * storage engine: {{ backend.engine }}
              * volume type: {{ backend.type_name}}
            {%- endfor %}
        {%- endif %}
  {%- endif %}
  {%- if pillar.cinder.volume is defined %}
  {%- from "cinder/map.jinja" import volume with context %}
    volume:
      name: volume
      param:
        {%- if pillar.cinder.volume.version is defined %}
        version:
          name: "Version"
          value: {{ volume.version }}
        {%- endif %}
        {%- if pillar.cinder.volume.database is defined %}
        database_host:
          name: "Database"
          value: {{ volume.database.user }}@{{ volume.database.host }}:{{ volume.database.port }}//{{ volume.database.name }}
        {%- endif %}
        {%- if pillar.cinder.volume.message_queue is defined %}
        message_queue_ip:
          name: "Message queue"
          value: {{ volume.message_queue.user }}@{{ volume.message_queue.host }}:{{ volume.message_queue.port }}{{ volume.message_queue.virtual_host }}
        {%- endif %}
        {%- if pillar.cinder.volume.identity is defined %}
        identity_host:
          name: "Identity service"
          value: {{ volume.identity.user }}@{{ volume.identity.host }}:{{ volume.identity.port }}
        {%- endif %}
        packages:
          value: |
            {%- for pkg in volume.pkgs %}
            {%- set pkg_version = "dpkg -l "+pkg+" | grep "+pkg+" | awk '{print $3}'" %}
            * {{ pkg }}: {{ salt['cmd.shell'](pkg_version) }}
            {%- endfor %}
        {%- if volume.backend is defined %}
        backends:
          value: |
            {%- for backend_name, backend in volume.get('backend', {}).items() %}
            * {{ backend_name }}:
              * storage engine: {{ backend.engine }}
              * volume type: {{ backend.type_name}}
            {%- endfor %}
        {%- endif %}
  {%- endif %}
